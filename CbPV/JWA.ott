metavar x, y ::=

indexvar i ::=

grammar
  V, W :: 'V_' ::=
    | x             :: :: var
    | thunk x . M   :: :: point
    | ( i , V )     :: :: sum
    | ( V , V' )    :: :: pair

  M, N :: 'M_' ::=
    | let V be x . M                                ::  :: let
    | pm V as { . . . , ( i , x ) . Mi , . . . }    ::  :: pm
                        (+ bind x in Mi +)
    | pm V as ( x , y ) . M                         ::  :: unpair
    | \ { . . . , i . Mi , . . . }                  ::  :: prod
    | V _/ W                                        ::  :: jump


  A :: 'A_' ::=
    | neg A         :: :: jumppoint
    | sumiI Ai      :: :: sum
    | 1             :: :: unit
    | A times A'    :: :: prod


  G {{ tex \Gamma }} :: 'G_' ::=
    | empty          :: :: emp
    | G , x : A      :: :: cons
    | G , x : A , G' :: :: mid

  terminals :: 'terminals_' ::=
    | \             ::  :: lambda     {{ tex \lambda }}
    | |-n           ::  :: turnstilen {{ tex \vdash^n }}
    | |-v           ::  :: turnstilev {{ tex \vdash^v }}
    | ->            ::  :: fn         {{ tex \rightarrow }}
    | sumiI         ::  :: sum        {{ tex \Sigma_{i \in I} }}
    | prodiI        ::  :: prod       {{ tex \Pi_{i \in I} }}
    | times         ::  :: times      {{ tex \times }}
    | neg           ::  :: neg        {{ tex \neg }}
    | thunk         ::  :: thunk      {{ tex \gamma }}
    | _/            ::  :: nearrow    {{ tex \nearrow }}

  formula :: formula_ ::=
    | judgement :: :: judgement
    | formula1 .. formulai :: :: dots

defns
  Jtype :: '' ::=

defn
  G |-v V : A :: :: GtA :: A_ by

  ------------------ :: var
  G, x:A, G' |-v x:A

  G |-v V : Ai
  ------------------------::sum
  G |-v (i, V) : sumiI Ai

  G |-v V : A
  G |-v V' : A'
  --------------------------::pair
  G |-v (V, V') : A times A'

  G, x:A |-n M
  -----------------------::point
  G |-v thunk x.M : neg A

defn
  G |-n M :: :: Gtn :: N_ by

  G |-v V:A
  G, x:A |-n M
  -------------------::let
  G |-n let V be x. M

  G |-v V:sumiI Ai
  </ G, x:Ai |-n Mi // i />
  --------------------------------::pm
  G |-n pm V as {...,(i,x).Mi,...}

  G |-v V : A times A'
  G, x:A, y:A' |-n M
  ---------------------::unpair
  G |-n pm V as (x,y).M

  G |-v V : A
  G |-v W : neg A
  ----------------::jump
  G |-n V _/ W
